package com.pingpong.admin.user;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.pingpong.common.entity.Role;
import com.pingpong.common.entity.User;

@Controller
public class UserController {

	@Autowired
	public UserService userService;

	@GetMapping("/users")
	public String listUser(Model model) {
		List<User> listUsers = userService.listUsers();
		model.addAttribute("listUsers", listUsers);
		return "users";
	}

	@GetMapping("/new-user")
	public String newUser(Model model) {
		List<Role> listRoles = userService.listRoles();
		User user = new User();
		user.setEnabled(true);
		model.addAttribute("user", user);
		model.addAttribute("listRoles", listRoles);
		model.addAttribute("pageTitle", "Create new user");
		
		return "user_form";
	}

	@PostMapping("/save")
	public String saveUser(User user, RedirectAttributes attributes) {
		System.out.println(user);
		userService.newUser(user);
		attributes.addFlashAttribute("message", "Success");
		
		return "redirect:users";
	}

	
	@GetMapping("/delete/{id}")
	public String deleteUser(@PathVariable(name = "id") Integer id, Model model, RedirectAttributes attributes) {
		try {
			userService.delete(id);
			attributes.addFlashAttribute("message", "The User Id " + id + " has been deleted Successfully");
			
		} catch (UserNotFoundException e) {
			// TODO Auto-generated catch block
			attributes.addAttribute("message", e.getMessage());
		}
		return "redirect:../users";
	}
	@GetMapping("{id}")
	public String editUser(@PathVariable(name = "id") Integer id, Model model, RedirectAttributes attributes) {
		try {
			User user = userService.getId(id);
			List<Role> listRoles = userService.listRoles();
			model.addAttribute("user", user);
			model.addAttribute("listRoles", listRoles);
			model.addAttribute("pageTitle", "Edit user (ID: " + id + ")");

			return "user_form";
		} catch (UserNotFoundException e) {
			// TODO Auto-generated catch block
			attributes.addAttribute("message", e.getMessage());
		}
		return "redirect:users";
	}
	
	@GetMapping("/user/{id}/enabled/{status}")
	public String updateStatus(@PathVariable("id") Integer id, @PathVariable("status") Boolean enabled, RedirectAttributes attributes) {
		
		userService.updateStatus(id, enabled);
		String status = enabled ? "enabled" : "disable";
		
		return "redirect:users";
	}
}
