package com.pingpong.admin.user;

import java.awt.print.Pageable;
import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.pingpong.common.entity.Role;
import com.pingpong.common.entity.User;

@Service
@Transactional
public class UserService {
	
	@Autowired
	private UserRepository userRepo;
	
	@Autowired
	public PasswordEncoder encoder;
	
	@Autowired
	private RoleReposiroty roleRepo;
	
	public List<User> listUsers(){
		return (List<User>) userRepo.findAll();
	}
	
	public Page<User> listByPage(int pageNume) {
		Pageable pageable = (Pageable) PageRequest.of(pageNume - 1, 4);
		return (Page<User>) userRepo.findAll((Sort) pageable);
	}
	
	public List<Role> listRoles(){
		return (List<Role>) roleRepo.findAll();
	}
	
	public User newUser(User user) {
		
		boolean isUpdatingUser = (user.getId() != null);
		if(isUpdatingUser) {
			User existingUser = userRepo.findById(user.getId()).get();
			
			if(user.getPassword().isEmpty()) {
				user.setPassword(existingUser.getPassword());
			} else {
				encoderPassword(user);
			}
		} else {
			encoderPassword(user);
		}
		return  userRepo.save(user);
	}
	
	private void encoderPassword(User user) {
		String encoderPassword = encoder.encode(user.getPassword());
		user.setPassword(encoderPassword);
	}
	public boolean isEmailUnique(Integer id, String email) {
		User user =  userRepo.getUserByEmail(email);
		if(user == null) {
			return true;
		}
		boolean checkNewUser = (id == null);
		if(checkNewUser) {
			if(user != null) {
				return false;
			}
		} else {
			if(user.getId() != id) {
				return false;
			}
		}
		
		return true;
	}

	public User getId(Integer id) throws UserNotFoundException {
		// TODO Auto-generated method stub
		try {
			return userRepo.findById(id).get();
		} catch (Exception e) {
			// TODO: handle exception
			throw new UserNotFoundException("could not find any	user with id" + id);
		}
	}
	
	public void delete(Integer id) throws UserNotFoundException {
		
		Long countById = userRepo.countById(id);
		if(countById == null || countById == 0) {
			throw new UserNotFoundException("could not find any	user with id" + id);
		}
		userRepo.deleteById(id);
	}
	
	public void updateStatus(Integer id, boolean enable) {
		userRepo.updateStatus(id, enable);
	}
}
